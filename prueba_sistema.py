#!/usr/bin/env python3
"""
Script de Prueba para Sistema de Vigilancia Aut√≥nomo Snow
Verifica que todos los componentes funcionen correctamente
"""

import sys
import os
import json
import time
import logging
from pathlib import Path

def verificar_archivos():
    """Verifica que todos los archivos necesarios existan"""
    print("üîç Verificando archivos del sistema...")
    
    archivos_requeridos = [
        "sistema_vigilancia_autonomo.py",
        "sistema_emergencia_sms.py", 
        "optimizador_energia.py",
        "config_sistema.json",
        "config_sms.json",
        "config_energia.json",
        "best.pt",
        "sonido_prueva0.mp3",
        "sonido_prueva2.mp3"
    ]
    
    archivos_faltantes = []
    for archivo in archivos_requeridos:
        if not Path(archivo).exists():
            archivos_faltantes.append(archivo)
        else:
            print(f"  ‚úÖ {archivo}")
    
    if archivos_faltantes:
        print(f"  ‚ùå Archivos faltantes: {archivos_faltantes}")
        return False
    
    print("  ‚úÖ Todos los archivos requeridos est√°n presentes")
    return True

def verificar_dependencias():
    """Verifica que las dependencias de Python est√©n instaladas"""
    print("\nüîç Verificando dependencias de Python...")
    
    dependencias = [
        "ultralytics",
        "cv2", 
        "pygame",
        "psutil",
        "numpy",
        "threading",
        "logging",
        "json",
        "time",
        "datetime"
    ]
    
    dependencias_faltantes = []
    for dep in dependencias:
        try:
            if dep == "cv2":
                import cv2
            elif dep == "ultralytics":
                from ultralytics import YOLO
            elif dep == "pygame":
                import pygame
            elif dep == "psutil":
                import psutil
            elif dep == "numpy":
                import numpy
            else:
                __import__(dep)
            print(f"  ‚úÖ {dep}")
        except ImportError:
            dependencias_faltantes.append(dep)
            print(f"  ‚ùå {dep}")
    
    if dependencias_faltantes:
        print(f"  ‚ùå Dependencias faltantes: {dependencias_faltantes}")
        print("  üí° Instalar con: pip3 install " + " ".join(dependencias_faltantes))
        return False
    
    print("  ‚úÖ Todas las dependencias est√°n instaladas")
    return True

def verificar_configuraciones():
    """Verifica que los archivos de configuraci√≥n sean v√°lidos"""
    print("\nüîç Verificando configuraciones...")
    
    configs = [
        ("config_sistema.json", "Configuraci√≥n principal"),
        ("config_sms.json", "Configuraci√≥n SMS"),
        ("config_energia.json", "Configuraci√≥n energ√≠a")
    ]
    
    for archivo, descripcion in configs:
        try:
            with open(archivo, 'r') as f:
                config = json.load(f)
            print(f"  ‚úÖ {descripcion} - V√°lida")
        except FileNotFoundError:
            print(f"  ‚ùå {descripcion} - Archivo no encontrado")
            return False
        except json.JSONDecodeError as e:
            print(f"  ‚ùå {descripcion} - JSON inv√°lido: {e}")
            return False
    
    print("  ‚úÖ Todas las configuraciones son v√°lidas")
    return True

def verificar_camara():
    """Verifica que la c√°mara est√© disponible"""
    print("\nüîç Verificando c√°mara...")
    
    try:
        import cv2
        cap = cv2.VideoCapture(0)
        
        if not cap.isOpened():
            print("  ‚ùå No se pudo abrir la c√°mara")
            return False
        
        ret, frame = cap.read()
        if not ret:
            print("  ‚ùå No se pudo capturar frame de la c√°mara")
            cap.release()
            return False
        
        print(f"  ‚úÖ C√°mara funcionando - Resoluci√≥n: {frame.shape[1]}x{frame.shape[0]}")
        cap.release()
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error verificando c√°mara: {e}")
        return False

def verificar_modelo_yolo():
    """Verifica que el modelo YOLO est√© disponible"""
    print("\nüîç Verificando modelo YOLO...")
    
    try:
        from ultralytics import YOLO
        
        if not Path("best.pt").exists():
            print("  ‚ùå Archivo best.pt no encontrado")
            return False
        
        modelo = YOLO('best.pt')
        print("  ‚úÖ Modelo YOLO cargado correctamente")
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error cargando modelo YOLO: {e}")
        return False

def verificar_audio():
    """Verifica que los archivos de audio est√©n disponibles"""
    print("\nüîç Verificando archivos de audio...")
    
    archivos_audio = [
        "sonido_prueva0.mp3",
        "sonido_prueva2.mp3"
    ]
    
    for archivo in archivos_audio:
        if Path(archivo).exists():
            print(f"  ‚úÖ {archivo}")
        else:
            print(f"  ‚ùå {archivo} - No encontrado")
            return False
    
    try:
        import pygame
        pygame.mixer.init()
        print("  ‚úÖ Pygame mixer inicializado")
        return True
    except Exception as e:
        print(f"  ‚ùå Error inicializando pygame: {e}")
        return False

def verificar_gpio():
    """Verifica que GPIO est√© disponible (solo en Raspberry Pi)"""
    print("\nüîç Verificando GPIO...")
    
    try:
        import RPi.GPIO as GPIO
        print("  ‚úÖ RPi.GPIO disponible")
        return True
    except ImportError:
        print("  ‚ö†Ô∏è  RPi.GPIO no disponible (no es Raspberry Pi o no instalado)")
        return True  # No es cr√≠tico para la prueba
    except Exception as e:
        print(f"  ‚ùå Error con GPIO: {e}")
        return False

def verificar_directorios():
    """Verifica que los directorios necesarios existan"""
    print("\nüîç Verificando directorios...")
    
    directorios = ["logs", "backups"]
    
    for directorio in directorios:
        Path(directorio).mkdir(exist_ok=True)
        print(f"  ‚úÖ Directorio {directorio}/ creado/verificado")
    
    return True

def prueba_sistema_basico():
    """Ejecuta una prueba b√°sica del sistema"""
    print("\nüß™ Ejecutando prueba b√°sica del sistema...")
    
    try:
        # Importar el sistema de desarrollo
        sys.path.append('.')
        from sistema_desarrollo import SistemaVigilanciaDesarrollo
        
        print("  ‚úÖ Sistema de desarrollo importado correctamente")
        
        # Crear instancia (sin inicializar hardware)
        print("  üîÑ Creando instancia del sistema...")
        # Nota: No inicializamos completamente para evitar problemas con hardware
        
        print("  ‚úÖ Prueba b√°sica completada")
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error en prueba b√°sica: {e}")
        return False

def generar_reporte():
    """Genera un reporte de la verificaci√≥n"""
    print("\nüìã Generando reporte...")
    
    reporte = {
        "fecha": time.strftime("%Y-%m-%d %H:%M:%S"),
        "sistema": "Sistema de Vigilancia Aut√≥nomo SADA",
        "version": "1.0",
        "resultados": {}
    }
    
    # Aqu√≠ se podr√≠an agregar m√°s verificaciones y resultados
    
    with open("reporte_verificacion.json", "w") as f:
        json.dump(reporte, f, indent=4)
    
    print("  ‚úÖ Reporte generado: reporte_verificacion.json")

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üöÄ Sistema de Verificaci√≥n SADA")
    print("=" * 50)
    
    verificaciones = [
        ("Archivos del sistema", verificar_archivos),
        ("Dependencias Python", verificar_dependencias),
        ("Configuraciones", verificar_configuraciones),
        ("C√°mara", verificar_camara),
        ("Modelo YOLO", verificar_modelo_yolo),
        ("Audio", verificar_audio),
        ("GPIO", verificar_gpio),
        ("Directorios", verificar_directorios),
        ("Sistema b√°sico", prueba_sistema_basico)
    ]
    
    resultados = []
    
    for nombre, funcion in verificaciones:
        try:
            resultado = funcion()
            resultados.append((nombre, resultado))
        except Exception as e:
            print(f"  ‚ùå Error en {nombre}: {e}")
            resultados.append((nombre, False))
    
    # Resumen final
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE VERIFICACI√ìN")
    print("=" * 50)
    
    exitosos = 0
    total = len(resultados)
    
    for nombre, resultado in resultados:
        estado = "‚úÖ EXITOSO" if resultado else "‚ùå FALLIDO"
        print(f"{nombre:.<30} {estado}")
        if resultado:
            exitosos += 1
    
    print(f"\nResultado: {exitosos}/{total} verificaciones exitosas")
    
    if exitosos == total:
        print("üéâ ¬°Sistema listo para funcionar!")
        print("\nPr√≥ximos pasos:")
        print("1. Ejecutar: ./instalar_sistema.sh")
        print("2. Reiniciar: sudo reboot")
        print("3. Iniciar: ./iniciar_sistema.sh")
    else:
        print("‚ö†Ô∏è  Algunas verificaciones fallaron. Revisar errores arriba.")
        print("\nSoluciones comunes:")
        print("- Instalar dependencias faltantes: pip3 install <dependencia>")
        print("- Verificar conexi√≥n de c√°mara")
        print("- Verificar archivos de configuraci√≥n")
    
    generar_reporte()
    
    return exitosos == total

if __name__ == "__main__":
    try:
        exito = main()
        sys.exit(0 if exito else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Verificaci√≥n interrumpida por usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Error cr√≠tico en verificaci√≥n: {e}")
        sys.exit(1)
